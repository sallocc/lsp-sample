// AUTOGENERATED FILE
// This file was generated from arithmetic.ohm by `ohm generateBundles`.

import {
  BaseActionDict,
  Grammar,
  IterationNode,
  Node,
  NonterminalNode,
  Semantics,
  TerminalNode
} from 'ohm-js';

export interface ArithmeticActionDict<T> extends BaseActionDict<T> {
  Exp?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  AddExp_plus?: (this: NonterminalNode, arg0: NonterminalNode, arg1: TerminalNode, arg2: NonterminalNode) => T;
  AddExp_minus?: (this: NonterminalNode, arg0: NonterminalNode, arg1: TerminalNode, arg2: NonterminalNode) => T;
  AddExp?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  MulExp_times?: (this: NonterminalNode, arg0: NonterminalNode, arg1: TerminalNode, arg2: NonterminalNode) => T;
  MulExp_divide?: (this: NonterminalNode, arg0: NonterminalNode, arg1: TerminalNode, arg2: NonterminalNode) => T;
  MulExp?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  ExpExp_power?: (this: NonterminalNode, arg0: NonterminalNode, arg1: TerminalNode, arg2: NonterminalNode) => T;
  ExpExp?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  PriExp_paren?: (this: NonterminalNode, arg0: TerminalNode, arg1: NonterminalNode, arg2: TerminalNode) => T;
  PriExp_pos?: (this: NonterminalNode, arg0: TerminalNode, arg1: NonterminalNode) => T;
  PriExp_neg?: (this: NonterminalNode, arg0: TerminalNode, arg1: NonterminalNode) => T;
  PriExp?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  ident?: (this: NonterminalNode, arg0: NonterminalNode, arg1: IterationNode) => T;
  number_fract?: (this: NonterminalNode, arg0: IterationNode, arg1: TerminalNode, arg2: IterationNode) => T;
  number_whole?: (this: NonterminalNode, arg0: IterationNode) => T;
  number?: (this: NonterminalNode, arg0: NonterminalNode) => T;
}

export interface ArithmeticSemantics extends Semantics {
  addOperation<T>(name: string, actionDict: ArithmeticActionDict<T>): this;
  extendOperation<T>(name: string, actionDict: ArithmeticActionDict<T>): this;
  addAttribute<T>(name: string, actionDict: ArithmeticActionDict<T>): this;
  extendAttribute<T>(name: string, actionDict: ArithmeticActionDict<T>): this;
}

export interface ArithmeticGrammar extends Grammar {
  createSemantics(): ArithmeticSemantics;
  extendSemantics(superSemantics: ArithmeticSemantics): ArithmeticSemantics;
}

declare const grammar: ArithmeticGrammar;
export default grammar;

