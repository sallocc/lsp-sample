// AUTOGENERATED FILE
// This file was generated from fullGrammar.ohm by `ohm generateBundles`.

import {
  BaseActionDict,
  Grammar,
  IterationNode,
  Node,
  NonterminalNode,
  Semantics,
  TerminalNode
} from 'ohm-js';

export interface JayActionDict<T> extends BaseActionDict<T> {
  Prog?: (this: NonterminalNode, arg0: NonterminalNode | TerminalNode, arg1: NonterminalNode) => T;
  Expr?: (this: NonterminalNode, arg0: NonterminalNode | TerminalNode, arg1: NonterminalNode | TerminalNode, arg2: NonterminalNode | TerminalNode, arg3: Node, arg4: NonterminalNode | TerminalNode, arg5: NonterminalNode | TerminalNode) => T;
  Function?: (this: NonterminalNode, arg0: TerminalNode) => T;
  End?: (this: NonterminalNode, arg0: TerminalNode) => T;
  Appl_Expr?: (this: NonterminalNode, arg0: NonterminalNode, arg1: NonterminalNode | TerminalNode) => T;
  Fun_sig?: (this: NonterminalNode, arg0: NonterminalNode, arg1: NonterminalNode, arg2: TerminalNode, arg3: NonterminalNode) => T;
  Fun_sig_list?: (this: NonterminalNode, arg0: NonterminalNode, arg1: TerminalNode, arg2: NonterminalNode | TerminalNode) => T;
  Primary_expr?: (this: NonterminalNode, arg0: Node, arg1: NonterminalNode | TerminalNode, arg2: NonterminalNode | TerminalNode) => T;
  Param_list?: (this: NonterminalNode, arg0: NonterminalNode, arg1: NonterminalNode | TerminalNode) => T;
  Label?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  Ident_usage?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  Ident_decl?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  Record_body?: (this: NonterminalNode, arg0: NonterminalNode, arg1: TerminalNode, arg2: NonterminalNode, arg3: TerminalNode, arg4: NonterminalNode | TerminalNode) => T;
  List_body?: (this: NonterminalNode, arg0: NonterminalNode, arg1: TerminalNode, arg2: NonterminalNode | TerminalNode) => T;
  Variant_label?: (this: NonterminalNode, arg0: TerminalNode, arg1: NonterminalNode) => T;
  Match_expr_list?: (this: NonterminalNode, arg0: NonterminalNode, arg1: TerminalNode, arg2: NonterminalNode | TerminalNode) => T;
  Match_expr?: (this: NonterminalNode, arg0: NonterminalNode, arg1: TerminalNode, arg2: NonterminalNode) => T;
  Pattern?: (this: NonterminalNode, arg0: Node, arg1: NonterminalNode | TerminalNode, arg2: NonterminalNode | TerminalNode, arg3: TerminalNode) => T;
  Identifier?: (this: NonterminalNode, arg0: NonterminalNode, arg1: IterationNode) => T;
  ident_start?: (this: NonterminalNode, arg0: NonterminalNode | TerminalNode) => T;
  ident_cont?: (this: NonterminalNode, arg0: NonterminalNode | TerminalNode) => T;
  Record_pattern_element?: (this: NonterminalNode, arg0: NonterminalNode, arg1: TerminalNode, arg2: NonterminalNode) => T;
}

export interface JaySemantics extends Semantics {
  addOperation<T>(name: string, actionDict: JayActionDict<T>): this;
  extendOperation<T>(name: string, actionDict: JayActionDict<T>): this;
  addAttribute<T>(name: string, actionDict: JayActionDict<T>): this;
  extendAttribute<T>(name: string, actionDict: JayActionDict<T>): this;
}

export interface JayGrammar extends Grammar {
  createSemantics(): JaySemantics;
  extendSemantics(superSemantics: JaySemantics): JaySemantics;
}

declare const grammar: JayGrammar;
export default grammar;

