Jay {
	Prog = Expr end
	| end
	Expr = Appl_Expr
	| Variant_label Expr %prec prec_variant
  	| Expr * Expr
  	| Expr \ Expr
  	| Expr % Expr
  	| Expr + Expr
  	| Expr - Expr
  	| Expr :: Expr
  	| Expr == Expr
  	| Expr <> Expr
  	| Expr > Expr
  	| Expr >= Expr
  	| Expr < Expr
  	| Expr <= Expr
  	| not Expr
  	| Expr and Expr
  	| Expr or Expr
  	| if Expr then Expr else Expr %prec prec_if
  	| Function Param_list -> Expr %prec prec_fun
  	| let rec Fun_sig_list in Expr %prec prec_fun
  	| let Ident_decl = Expr in Expr %prec prec_let
  	| let Fun_sig in Expr %prec prec_fun
  	| match Expr with |? Match_expr_list End
	Function = fun
	| function
	End = "end"
	Appl_Expr = Appl_Expr Primary_expr
	| Primary_expr
	Fun_sig = Ident_decl Param_list = Expr
	Fun_sig_list = Fun_sig
	| Fun_sig with Fun_sig_list
	Primary_expr = digit+
	| true
	| false
	| ident_usage	
	| \{ Record_body \}
	| \{ \}
	| \[ List_body \]
	| \[ \]
	| \( Expr \)
	| Primary_expr . Label 
	Param_list = Ident_decl Param_list
	| Ident_decl
	Label = Identifier
	ident_usage = Ident_decl
	Ident_decl = Identifier
	Record_body = Label = Expr
	| Label = Expr , Record_body
	List_body = Expr , List_body
	| Expr
	Variant_label = ` Identifier
	Match_expr_list = Match_expr | Match_expr_list
	| Match_expr
	Match_expr = Pattern -> Expr
	Pattern = _ 
	| digit+
	| bool
	| Function
	| Identifier
	| Variant_label Ident_decl
	| Variant_label ( Ident_decl )
	//| { Separated_nonempty_trailing_list<",", Record_pattern_element> _ }
	//| { Separated_nonempty_trailing_list<",", Record_pattern_element> }
	| { _ }
	| { }
	| [ ]
	| Ident_decl :: Ident_decl
	| ( Pattern )
	Identifier = ident_start ident_cont*
	ident_start = letter | _ 
	ident_cont = letter | digit | _
	Record_pattern_element = Label = Ident_decl
	//Separated_nonempty_trailing_list<separator, rule> =  

}